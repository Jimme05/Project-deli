import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/order_create_request.dart';
import '../services/http_upload_service.dart';

class OrderService {
  final _db = FirebaseFirestore.instance;
  final _auth = FirebaseAuth.instance;

  Future<String> createOrder(OrderCreateRequest req) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
      }

      final uid = user.uid;
      print('üü¢ Creating order by user: $uid');

      // üì¶ ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore
      final userSnap = await _db.collection('users').doc(uid).get();
      if (!userSnap.exists) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
      }

      final addrSnap = await _db
          .collection('users')
          .doc(uid)
          .collection('addresses')
          .where('isDefault', isEqualTo: true)
          .limit(1)
          .get();

      if (addrSnap.docs.isEmpty) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡πâ‡∏≤‡∏ô/‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á (‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô)');
      }
      final pickupAddr = addrSnap.docs.first.data();

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô subcollection ‡πÄ‡∏ä‡πà‡∏ô users/{uid}/addresses/{main}
      // ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
      /*
      final addrSnap = await _db
          .collection('users')
          .doc(uid)
          .collection('addresses')
          .limit(1)
          .get();

      if (addrSnap.docs.isEmpty) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡πâ‡∏≤‡∏ô/‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á (‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô)');
      }
      final pickupAddr = addrSnap.docs.first.data();
      */

      final orderRef = _db.collection('orders').doc();

      // üîπ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      String? imgUrl1;
      String? imgName1;
      final File? f1 = req.status1ImageFile;
      if (f1 != null) {
        final up = await HttpUploadService().uploadFile(
          f1,
          customName: "order_${orderRef.id}_status1.jpg",
        );
        imgUrl1 = up.url;
        imgName1 = up.filename;
      }

      // üî∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
      final data = {
        'oid': orderRef.id,
        'Uid_sender': uid,
        'Uid_receiver': req.receiverUid ?? '',
        'Name': req.receiverName,
        'receiver_phone': req.receiverPhone,
        'pickup_address': pickupAddr, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å user ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        'delivery_address': {
          'label': req.deliveryAddress.label,
          'addressText': req.deliveryAddress.addressText,
          'Latitude': req.deliveryAddress.latitude,
          'Longitude': req.deliveryAddress.longitude,
        },
        'Status_order': 1, // ‡∏£‡∏≠‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
        'created_at': FieldValue.serverTimestamp(),
        'description': req.description,
        'img_status_1': imgUrl1,
        'img_status_1_name': imgName1,
        'img_status_3': null,
        'img_status_4': null,
        'assignedRiderId': null,
      };

      await orderRef.set(data);
      print('‚úÖ Order created successfully: ${orderRef.id}');
      return orderRef.id;
    } catch (e, st) {
      print('‚ùå ERROR createOrder: $e');
      print(st);
      rethrow;
    }
  }
}
